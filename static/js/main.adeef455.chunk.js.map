{"version":3,"sources":["constants/api.js","api/auth.js","components/App.js","serviceWorker.js","index.js"],"names":["authUser","a","url","data","axios","method","response","alias","vpf","URLSearchParams","window","location","search","get","Boolean","hostname","match","ReactDOM","render","props","React","useState","user","setUser","useEffect","URL","targetUrl","fetchUser","Status","Response","RedirectTargetUrl","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAAO,I,wBCEA,SAAeA,IAAtB,+B,4CAAO,4CAAAC,EAAA,6DAAwBC,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,kBAGkBC,IAAM,CACnBC,OAAQ,OACRH,IAAKA,EACLC,KAAMA,IANX,OAGCG,EAHD,uDASCA,EAAW,KAAEA,SATd,gDAYSA,EAASH,KAZlB,CAYwBI,MAAO,mBAZ/B,0D,sBCaP,IAAMC,EAAM,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,OCHxCC,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBFYD,SAAaC,GAAQ,IAAD,EACPC,IAAMC,SAAS,IADR,mBACxBC,EADwB,KAClBC,EADkB,OAEXH,IAAMC,SAAS,IAFJ,mBA4B/B,OA5B+B,UAG/BD,IAAMI,WAAU,WACPhB,GAAK,uCACN,4BAAAP,EAAA,sEACuBD,EAASyB,wDAA4B,CACpDC,UFjBhB,2DEeQ,OACUvB,EADV,OAIIoB,EAAQpB,GAJZ,2CADM,oDAONwB,KAEL,IAEHP,IAAMI,WAAU,YAEPd,OAAOC,SAASC,QACjBU,GACe,GAAfA,EAAKM,QACLN,EAAKO,SAASC,oBAIdpB,OAAOC,SAASoB,KAAOT,EAAKO,SAASC,qBAE1C,CAACR,IAGA,6BACMA,GAAwB,IAAhBA,EAAKM,OAA6C,KAA9B,iDAE7BN,EAAOA,EAAKM,OAAS,KACrBpB,KE7CG,MAASwB,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.adeef455.chunk.js","sourcesContent":["export const URL = \"https://conscience-recovery.herokuapp.com\";\r\n\r\nexport const PAYFONE_AUTH_URL = \"\";\r\n\r\nexport const PORT = 8080;\r\n\r\nexport const TARGET_URL =\r\n    \"https://ryancallahan312.github.io/reaction-speed-cewit\";\r\n\r\nexport const POST_TEST_RESULTS_ROUTE = \"\";\r\n\r\nexport const POST_AUTH_USER_ROUTE = \"/api/v1/auth\";\r\n\r\nexport const GET_CLIENT_DATA_ROUTE = \"\";\r\n","import axios from \"axios\";\r\n\r\nexport async function authUser(url = \"\", data = {}) {\r\n    let response;\r\n    try {\r\n        response = await axios({\r\n            method: \"post\",\r\n            url: url,\r\n            data: data\r\n        });\r\n    } catch (e) {\r\n        response = e.response;\r\n    }\r\n\r\n    return { ...response.data, alias: \"name here pls\" }; // parses JSON response into native JavaScript objects\r\n}\r\n","import React from \"react\";\r\nimport { sendTestResults } from \"../api/tests\";\r\nimport {\r\n    URL,\r\n    PAYFONE_AUTH_URL,\r\n    PORT,\r\n    POST_AUTH_USER_ROUTE,\r\n    TARGET_URL\r\n} from \"../constants/api\";\r\nimport { authUser } from \"../api/auth\";\r\nimport TestScreen from \"./TestScreen\";\r\nimport axios from \"axios\";\r\n\r\n//const styles = {};\r\n\r\nconst vpf = new URLSearchParams(window.location.search).get(\"vfp\");\r\n\r\nexport default function App(props) {\r\n    const [user, setUser] = React.useState(\"\");\r\n    const [ip, setIp] = React.useState(\"\");\r\n    React.useEffect(() => {\r\n        if (!vpf) {\r\n            async function fetchUser() {\r\n                const data = await authUser(URL + POST_AUTH_USER_ROUTE, {\r\n                    targetUrl: TARGET_URL\r\n                });\r\n                setUser(data);\r\n            }\r\n            fetchUser();\r\n        }\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (\r\n            !window.location.search &&\r\n            user &&\r\n            user.Status == 0 &&\r\n            user.Response.RedirectTargetUrl\r\n        ) {\r\n            //if there is not a parameter in qs, user status is 0 and there is a redirect\r\n\r\n            window.location.href = user.Response.RedirectTargetUrl;\r\n        }\r\n    }, [user]);\r\n\r\n    return (\r\n        <div>\r\n            {!user || user.Status !== 0 ? <div>waiting for data</div> : null}\r\n            {/*<TestScreen user={user} />*/}\r\n            {user ? user.Status : null}\r\n            {vpf}\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}