{"version":3,"sources":["constants/api.js","api/auth.js","components/TimeTest.js","components/TestScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["URL","authUser","a","url","data","axios","method","response","alias","finishAuth","styles","borderRadius","color","cursor","minWidth","minHeight","backgroundColor","TimeTest","props","React","useState","isActive","setIsActive","lastLoggedTime","setLastLoggedTime","counter","setCounter","isTesting","setIsTesting","useEffect","setTimeout","Date","now","Math","floor","random","changeColorAtRandom","resetTest","style","background","onClick","hasTested","startTest","disabled","time","setLastTime","currentTime","handleClick","container","height","width","welcome","fontSize","button","border","outline","TestScreen","lastTime","times","setTimes","average","setAverage","showResults","setShowResults","push","console","log","length","reduce","acc","element","user","substr","textAlign","header","Boolean","window","location","hostname","match","ReactDOM","render","setUser","vfp","useMemo","URLSearchParams","search","get","payfoneId","setPayfoneId","finishUserAuth","targetUrl","fetchUser","Status","Response","RedirectTargetUrl","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82e4b5b1.chunk.js","sourcesContent":["export const URL = \"https://conscience-recovery.herokuapp.com\";\r\n\r\nexport const PAYFONE_AUTH_URL = \"\";\r\n\r\nexport const PORT = 8080;\r\n\r\nexport const TARGET_URL =\r\n    \"https://ryancallahan312.github.io/reaction-speed-cewit\";\r\n\r\nexport const POST_TEST_RESULTS_ROUTE = \"\";\r\n\r\nexport const POST_AUTH_USER_ROUTE = \"/api/v1/auth\";\r\n\r\nexport const POST_FINISH_AUTH_ROUTE = \"/api/v1/confAuth\";\r\n\r\nexport const GET_CLIENT_DATA_ROUTE = \"\";\r\n","import axios from \"axios\";\r\n\r\nexport async function authUser(url = \"\", data = {}) {\r\n    let response;\r\n    try {\r\n        response = await axios({\r\n            method: \"post\",\r\n            url: url,\r\n            data: data\r\n        });\r\n    } catch (e) {\r\n        response = e.response;\r\n    }\r\n\r\n    return { ...response.data, alias: \"name here pls\" }; // parses JSON response into native JavaScript objects\r\n}\r\n\r\nexport async function finishAuth(url = \"\", data = {}) {\r\n    let response;\r\n    try {\r\n        response = await axios({\r\n            method: \"post\",\r\n            url: url,\r\n            data: data\r\n        });\r\n    } catch (e) {\r\n        response = e.response;\r\n    }\r\n\r\n    return response.data;\r\n}\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n    container: {\r\n        textAlign: \"center\"\r\n    },\r\n    button: {\r\n        borderRadius: 10,\r\n        color: \"white\",\r\n        cursor: \"pointer\",\r\n        minWidth: \"150px\",\r\n        minHeight: \"40px\"\r\n    },\r\n    buttonActive: {\r\n        backgroundColor: \"rgba(18,224,0,1)\"\r\n    },\r\n    buttonInActive: {\r\n        backgroundColor: \"rgba(255,81,58,.4)\"\r\n    }\r\n};\r\n\r\nconst changeColorAtRandom = (setIsActive, setLastLoggedTime) => {\r\n    return setTimeout(() => {\r\n        setIsActive(true);\r\n        setLastLoggedTime(Date.now());\r\n    }, Math.floor(Math.random() * (2000 - 800)) + 800);\r\n};\r\n\r\nconst handleClick = (\r\n    setLastTime,\r\n    setIsActive,\r\n    lastLoggedTime,\r\n    counter,\r\n    setCounter,\r\n    currentTime\r\n) => {\r\n    setLastTime(currentTime - lastLoggedTime);\r\n    setIsActive(false);\r\n    setCounter(counter - 1);\r\n};\r\n\r\nconst startTest = (setCounter, setIsTesting, hasTested, resetTest) => {\r\n    if (hasTested) {\r\n        resetTest();\r\n    }\r\n    setIsTesting(true);\r\n    setCounter(3);\r\n};\r\n\r\nexport default function TimeTest(props) {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n    const [lastLoggedTime, setLastLoggedTime] = React.useState(null);\r\n    const [counter, setCounter] = React.useState(0);\r\n    const [isTesting, setIsTesting] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        if (counter > 0 && isActive === false)\r\n            changeColorAtRandom(setIsActive, setLastLoggedTime);\r\n        else setIsTesting(false);\r\n    }, [counter, isActive]);\r\n\r\n    const resetTest = () => {\r\n        props.resetTest();\r\n        setLastLoggedTime(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                style={{ ...styles.button, background: \"skyblue\" }}\r\n                onClick={() =>\r\n                    startTest(\r\n                        setCounter,\r\n                        setIsTesting,\r\n                        props.hasTested,\r\n                        resetTest\r\n                    )\r\n                }\r\n                disabled={isTesting}\r\n            >\r\n                start test\r\n            </button>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <button\r\n                onClick={() => {\r\n                    let time = Date.now();\r\n                    handleClick(\r\n                        props.setLastTime,\r\n                        setIsActive,\r\n                        lastLoggedTime,\r\n                        counter,\r\n                        setCounter,\r\n                        time\r\n                    );\r\n                }}\r\n                style={\r\n                    isActive\r\n                        ? { ...styles.buttonActive, ...styles.button }\r\n                        : { ...styles.buttonInActive, ...styles.button }\r\n                }\r\n                disabled={!isActive}\r\n            >\r\n                react to me!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport TimeTest from \"./TimeTest\";\r\n\r\nconst styles = {\r\n    container: {\r\n        height: \"85%\",\r\n        width: \"100%\"\r\n    },\r\n    welcome: {\r\n        fontSize: \"32px\",\r\n        color: \"rgba(54,183,255,1)\"\r\n    },\r\n    button: {\r\n        border: \"none\",\r\n        outline: \"none\",\r\n        width: \"100px\",\r\n        height: \"40px\",\r\n        borderRadius: \"11px\",\r\n        backgroundColor: \"skyblue\"\r\n    }\r\n};\r\n\r\nexport default function TestScreen(props) {\r\n    const [lastTime, setLastTime] = React.useState(0);\r\n    const [times, setTimes] = React.useState([]);\r\n    const [average, setAverage] = React.useState(null);\r\n    const [showResults, setShowResults] = React.useState(false);\r\n\r\n    const resetTest = (setAverage, setTimes, setLastTime) => {\r\n        setAverage(null);\r\n        setTimes([]);\r\n        setLastTime(0);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (lastTime !== 0) {\r\n            times.push(lastTime);\r\n            console.log(times.length);\r\n            if (times.length === 3) {\r\n                setAverage(\r\n                    times.reduce((acc, element) => acc + element) / times.length\r\n                );\r\n            }\r\n        }\r\n    }, [lastTime, times]);\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <p style={styles.welcome}>\r\n                Hello {props.user.substr(0, 8)}! welcome to reaction time!\r\n            </p>\r\n            <TimeTest\r\n                setLastTime={setLastTime}\r\n                hasTested={average ? true : false}\r\n                resetTest={() => resetTest(setAverage, setTimes, setLastTime)}\r\n            />\r\n            <p>\r\n                {average\r\n                    ? `your average time is ${Math.floor(average)}ms`\r\n                    : lastTime > 0\r\n                    ? `previous time is ${lastTime}ms`\r\n                    : null}\r\n            </p>\r\n            <button style={styles.button} onClick={() => setShowResults(true)}>\r\n                get todays results\r\n            </button>\r\n            {showResults ? (\r\n                <p>\r\n                    your average is {(average / 800) * 100}% of last times'\r\n                    result\r\n                </p>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { sendTestResults } from \"../api/tests\";\r\nimport {\r\n    URL,\r\n    POST_FINISH_AUTH_ROUTE,\r\n    POST_AUTH_USER_ROUTE,\r\n    TARGET_URL\r\n} from \"../constants/api\";\r\nimport { authUser, finishAuth } from \"../api/auth\";\r\nimport TestScreen from \"./TestScreen\";\r\n\r\nconst styles = {\r\n    container: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        textAlign: \"center\"\r\n    },\r\n    header: {\r\n        height: \"15%\",\r\n        width: \"100%\"\r\n    }\r\n};\r\n\r\nexport default function App(props) {\r\n    const [user, setUser] = React.useState(null);\r\n    const vfp = React.useMemo(\r\n        () => new URLSearchParams(window.location.search).get(\"vfp\"),\r\n        []\r\n    );\r\n    const [payfoneId, setPayfoneId] = React.useState(null);\r\n    React.useEffect(() => {\r\n        if (!vfp) {\r\n            async function fetchUser() {\r\n                const data = await authUser(URL + POST_AUTH_USER_ROUTE, {\r\n                    targetUrl: TARGET_URL\r\n                });\r\n                setUser(data);\r\n            }\r\n            fetchUser();\r\n        } else {\r\n            async function finishUserAuth() {\r\n                const data = await finishAuth(URL + POST_FINISH_AUTH_ROUTE, {\r\n                    vfp: vfp\r\n                });\r\n                setPayfoneId(data.substr(0, 8));\r\n            }\r\n            finishUserAuth();\r\n        }\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        if (\r\n            !window.location.search &&\r\n            user &&\r\n            user.Status === 0 &&\r\n            user.Response.RedirectTargetUrl\r\n        ) {\r\n            //if there is not a parameter in querystring, user status is 0 and there is a redirect\r\n\r\n            window.location.href = user.Response.RedirectTargetUrl;\r\n        }\r\n    }, [user]);\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <div style={styles.header}>\r\n                {payfoneId ? payfoneId : \"payphoneId\"}\r\n            </div>\r\n            {payfoneId ? <TestScreen user={payfoneId} /> : <p>payphoneId</p>}\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}