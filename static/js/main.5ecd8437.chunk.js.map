{"version":3,"sources":["constants/api.js","constants/regex.js","api/auth.js","components/timeTest.js","components/testSceen.js","components/App.js","serviceWorker.js","index.js"],"names":["PHONE_NUMBER_REGEX","a","alias","verified","styles","buttonActive","backgroundColor","buttonInActive","TimeTest","props","React","useState","isActive","setIsActive","lastLoggedTime","setLastLoggedTime","counter","setCounter","isTesting","setIsTesting","useEffect","setTimeout","Date","now","Math","floor","random","changeColorAtRandom","resetTest","onClick","hasTested","startTest","disabled","setLastTime","handleClick","style","TestScreen","lastTime","times","setTimes","average","setAverage","push","console","log","length","reduce","acc","element","user","findUser","phoneNumber","setUser","test","authUser","then","data","Boolean","window","location","hostname","match","ReactDOM","render","setPhoneNumber","type","value","onChange","e","target","id","name","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ecd8437.chunk.js","sourcesContent":["export const URL = \"\";\r\n\r\nexport const PAYFONE_AUTH_URL = \"\";\r\n\r\nexport const PORT = 0;\r\n\r\nexport const POST_TEST_RESULTS_ROUTE = \"\"\r\n\r\nexport const GET_CLIENT_DATA_ROUTE = \"\"","export const PHONE_NUMBER_REGEX = /^\\d{10}$/g","export async function authUser(url = \"\", data = {}) {\r\n    // const response = await fetch(url, {\r\n    //     method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n    //     headers: {\r\n    //         \"Content-Type\": \"application/json\"\r\n    //         // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    //     },\r\n    //     body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n    // });\r\n    // return await response.json(); // parses JSON response into native JavaScript objects\r\n\r\n    return { alias: \"Smitty\", verified: \"true\" };\r\n}\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n    buttonActive: {\r\n        backgroundColor: \"green\"\r\n    },\r\n    buttonInActive: {\r\n        backgroundColor: \"red\"\r\n    }\r\n};\r\n\r\nconst changeColorAtRandom = (setIsActive, setLastLoggedTime) => {\r\n    return setTimeout(() => {\r\n        setIsActive(true);\r\n        setLastLoggedTime(Date.now());\r\n    }, Math.floor(Math.random() * (2000 - 800)) + 800);\r\n};\r\n\r\nconst handleClick = (\r\n    setLastTime,\r\n    setIsActive,\r\n    lastLoggedTime,\r\n    setLastLoggedTime,\r\n    counter,\r\n    setCounter\r\n) => {\r\n    setLastTime(Date.now() - lastLoggedTime);\r\n    setIsActive(false);\r\n    setLastLoggedTime(0);\r\n    setCounter(counter - 1);\r\n};\r\n\r\nconst startTest = (setCounter, setIsTesting, hasTested, resetTest) => {\r\n    if (hasTested) {\r\n        resetTest();\r\n    }\r\n    setIsTesting(true);\r\n    setCounter(3);\r\n};\r\n\r\nexport default function TimeTest(props) {\r\n    const [isActive, setIsActive] = React.useState(false);\r\n    const [lastLoggedTime, setLastLoggedTime] = React.useState(null);\r\n    const [counter, setCounter] = React.useState(0);\r\n    const [isTesting, setIsTesting] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        if (counter > 0 && isActive === false)\r\n            changeColorAtRandom(setIsActive, setLastLoggedTime);\r\n        else setIsTesting(false);\r\n    }, [counter, isActive]);\r\n\r\n    const resetTest = () => {\r\n        props.resetTest();\r\n        setLastLoggedTime(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                onClick={() =>\r\n                    startTest(\r\n                        setCounter,\r\n                        setIsTesting,\r\n                        props.hasTested,\r\n                        resetTest\r\n                    )\r\n                }\r\n                disabled={isTesting}\r\n            >\r\n                start test\r\n            </button>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <button\r\n                onClick={() =>\r\n                    handleClick(\r\n                        props.setLastTime,\r\n                        setIsActive,\r\n                        lastLoggedTime,\r\n                        setLastLoggedTime,\r\n                        counter,\r\n                        setCounter\r\n                    )\r\n                }\r\n                style={isActive ? styles.buttonActive : styles.buttonInActive}\r\n                disabled={!isActive}\r\n            >\r\n                react to me!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport TimeTest from \"./timeTest\";\r\n\r\n//const styles = {};\r\n\r\nexport default function TestScreen(props) {\r\n    const [lastTime, setLastTime] = React.useState(0);\r\n    const [times, setTimes] = React.useState([]);\r\n    const [average, setAverage] = React.useState(null);\r\n\r\n    const resetTest = () => {\r\n        setAverage(null);\r\n        setTimes([]);\r\n        setLastTime(0);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (lastTime !== 0) {\r\n            times.push(lastTime);\r\n            console.log(times.length);\r\n            if (times.length === 3) {\r\n                setAverage(\r\n                    times.reduce((acc, element) => acc + element) / times.length\r\n                );\r\n            }\r\n        }\r\n    }, [lastTime, times]);\r\n\r\n    return (\r\n        <div>\r\n            <p>Hello {props.user.alias}! welcome to reaction time!</p>\r\n            <TimeTest\r\n                setLastTime={setLastTime}\r\n                hasTested={average ? true : false}\r\n                resetTest={resetTest}\r\n            />\r\n            <p>\r\n                {average\r\n                    ? `your average time is ${average}ms`\r\n                    : lastTime > 0\r\n                    ? `previous time is ${lastTime}ms`\r\n                    : null}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { sendTestResults } from \"../api/tests\";\r\nimport { URL, PAYFONE_AUTH_URL } from \"../constants/api\";\r\nimport { PHONE_NUMBER_REGEX } from \"../constants/regex\";\r\nimport { authUser } from \"../api/auth\";\r\nimport TestScreen from \"./testSceen\";\r\n\r\n//const styles = {};\r\n\r\nconst findUser = (phoneNumber, setUser) => {\r\n    if (PHONE_NUMBER_REGEX.test(phoneNumber)) {\r\n        console.log(\"good regex\");\r\n        authUser(URL, { phoneNumber }).then(data => {\r\n            setUser(data); // JSON data parsed by `response.json()` call\r\n        });\r\n    } else {\r\n        console.log(\"bad regex\");\r\n    }\r\n};\r\n\r\nexport default function App(props) {\r\n    const [phoneNumber, setPhoneNumber] = React.useState(\"\");\r\n    const [user, setUser] = React.useState(null);\r\n\r\n    return (\r\n        <div>\r\n            {!user ? (\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={phoneNumber}\r\n                        onChange={e => setPhoneNumber(e.target.value)}\r\n                        id=\"phone-number\"\r\n                        name=\"phone-number\"\r\n                    />\r\n                    <button onClick={() => findUser(phoneNumber, setUser)}>\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                <TestScreen user={user} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}