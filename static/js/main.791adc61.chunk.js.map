{"version":3,"sources":["components/timeTest.js","serviceWorker.js","index.js","components/App.js"],"names":["styles","buttonActive","backgroundColor","buttonInactive","TimeTest","props","React","useState","active","setActive","lastLoggedTime","setLastLoggedTime","counter","setCounter","useEffect","setTimeout","Date","now","Math","floor","random","changeColorAtRandom","onClick","startTest","setLastTime","handleClick","style","Boolean","window","location","hostname","match","ReactDOM","render","lastTime","times","average","push","length","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAEMA,EAAS,CACXC,aAAc,CACVC,gBAAiB,SAErBC,eAAgB,CACZD,gBAAiB,QA6BV,SAASE,EAASC,GAAQ,IAAD,EACRC,IAAMC,UAAS,GADP,mBAC7BC,EAD6B,KACrBC,EADqB,OAEQH,IAAMC,SAAS,MAFvB,mBAE7BG,EAF6B,KAEbC,EAFa,OAGNL,IAAMC,SAAS,GAHT,mBAG7BK,EAH6B,KAGpBC,EAHoB,KAUpC,OALAP,IAAMQ,WAAU,WACRF,EAAU,IAAgB,IAAXJ,GA/BC,SAACC,EAAWE,GAC7BI,YAAW,WACdN,GAAU,GACVE,EAAkBK,KAAKC,SACxBC,KAAKC,MAAM,KAAAD,KAAKE,UAA2B,KA4BtCC,CAAoBZ,EAAWE,KACpC,CAACC,EAASJ,IAGT,6BACI,4BAAQc,QAAS,kBAhBX,SAAAT,GACdA,EAAW,GAeoBU,CAAUV,KAAjC,cACA,6BACA,6BACA,6BACA,4BACIS,QAAS,kBAnCL,SAChBE,EACAf,EACAC,EACAC,EACAC,EACAC,GAEAW,EAAYR,KAAKC,MAAQP,GACzBD,GAAU,GACVE,EAAkB,GAClBE,EAAWD,EAAU,GAyBLa,CACIpB,EAAMmB,YACNf,EACAC,EACAC,EACAC,EACAC,IAGRa,MAAOlB,EAASR,EAAOC,aAAeD,EAAOG,gBAXjD,iBCxCQwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCAD,SAAa5B,GAAQ,IAAD,EACCC,IAAMC,SAAS,GADhB,mBACxB2B,EADwB,KACdV,EADc,OAELlB,IAAMC,SAAS,IAFV,mBAExB4B,EAFwB,aAGD7B,IAAMC,SAAS,OAHd,mBAGxB6B,EAHwB,KAc/B,OAd+B,KAK/B9B,IAAMQ,WAAU,WACK,IAAboB,EACAC,EAAME,KAAKH,GAEPC,EAAMG,SAGf,CAACJ,EAAUC,IAGV,6BACI,mDACA,kBAAC/B,EAAD,CAAUoB,YAAaA,IACvB,2BACKY,EAAO,+BACsBA,EADtB,iCAEkBF,EAFlB,UDnBR,MAASK,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.791adc61.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst styles = {\r\n    buttonActive: {\r\n        backgroundColor: \"green\"\r\n    },\r\n    buttonInactive: {\r\n        backgroundColor: \"red\"\r\n    }\r\n};\r\n\r\nconst changeColorAtRandom = (setActive, setLastLoggedTime) => {\r\n    return setTimeout(() => {\r\n        setActive(true);\r\n        setLastLoggedTime(Date.now());\r\n    }, Math.floor(Math.random() * (2000 - 800)) + 800);\r\n};\r\n\r\nconst handleClick = (\r\n    setLastTime,\r\n    setActive,\r\n    lastLoggedTime,\r\n    setLastLoggedTime,\r\n    counter,\r\n    setCounter\r\n) => {\r\n    setLastTime(Date.now() - lastLoggedTime);\r\n    setActive(false);\r\n    setLastLoggedTime(0);\r\n    setCounter(counter - 1);\r\n};\r\n\r\nconst startTest = setCounter => {\r\n    setCounter(3);\r\n};\r\n\r\nexport default function TimeTest(props) {\r\n    const [active, setActive] = React.useState(false);\r\n    const [lastLoggedTime, setLastLoggedTime] = React.useState(null);\r\n    const [counter, setCounter] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        if (counter > 0 && active === false)\r\n            changeColorAtRandom(setActive, setLastLoggedTime);\r\n    }, [counter, active]);\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => startTest(setCounter)}>start test</button>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <button\r\n                onClick={() =>\r\n                    handleClick(\r\n                        props.setLastTime,\r\n                        setActive,\r\n                        lastLoggedTime,\r\n                        setLastLoggedTime,\r\n                        counter,\r\n                        setCounter\r\n                    )\r\n                }\r\n                style={active ? styles.buttonActive : styles.buttonInactive}\r\n            >\r\n                react to me!\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport TimeTest from \"./timeTest\";\r\n\r\n//const styles = {};\r\n\r\nexport default function App(props) {\r\n    const [lastTime, setLastTime] = React.useState(0);\r\n    const [times, setTimes] = React.useState([]);\r\n    const [average, setAverage] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (lastTime !== 0) {\r\n            times.push(lastTime);\r\n        } else {\r\n            if (times.length === 3) {\r\n            }\r\n        }\r\n    }, [lastTime, times]);\r\n\r\n    return (\r\n        <div>\r\n            <p>Hello reaction time!</p>\r\n            <TimeTest setLastTime={setLastTime} />\r\n            <p>\r\n                {average\r\n                    ? `your average time is ${average}ms`\r\n                    : `previous time is ${lastTime}ms`}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n"],"sourceRoot":""}